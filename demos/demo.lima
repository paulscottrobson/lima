byte MMUControl@0
byte IOControl@1
byte Vicky.Master.Control@$D000
byte Bitmap0Control@$D100,Bitmap0High@$D103

proc io.select()
	IOControl=A
endproc

zword .poke.address
byte .fill.data

proc poke()
#	.poke.address=R:A=Y:Y=0:.poke.address[Y]=A
	inline $86,$C1,$85,$C0,$98,$92,$C0,$60
endproc

proc set.fill()
	.poke.address=R:.fill.data=Y
endproc

proc do.fill()
	Y=0
	r.for
		A=.fill.data:.poke.address[Y]=A:++.poke.address
	next
endproc

proc map()
	interrupt.off
	CPU->S
	A=$80:MMUControl=A
	S->CPU
	R+8:poke()
	A=$00:MMUControl=A
	interrupt.on
endproc

proc map.into()
	a+8:y=a:map(1)
	R=$2000
endproc

proc map.default()
	map(1,9)
endproc

proc clear.bitmap()
	.fill.data=A
	A=9:a.for
		map.into():.poke.address=R
		32:a.for
			A=.fill.data:Y=0
			repeat
				.poke.address[Y]=A
				++Y:Y=?
			until
			R=.poke.address:R+256:.poke.address=R
		next
	next
	map.default()
endproc

proc clear.sprites()
	io.select(0)
	set.fill($D900,$00)
	do.fill($200)
endproc

word .current.sprite

proc sprite.use()
	<<R:<<R:<<R:R+$D900
	.current.sprite=R
endproc

proc sprite.show()
	R=.current.sprite:.poke.address=R:Y=0
	A=.poke.address[Y]:A=1:.poke.address[Y]=A
endproc

proc sprite.hide()
	.poke.address=R:Y=0
	A=.poke.address[Y]:A=0:.poke.address[Y]=A
endproc

proc sprite.move() 
	Y->S:R->S 
	R=.current.sprite:R+4:.poke.address=R
	S->R:Y=0:.poke.address[Y]=R
	++Y:++Y
	S->A:R=A:.poke.address[Y]=R
endproc

proc sprite.image()
	R->S
	R=.current.sprite:++R
	.poke.address=R
	S->R:Y=0:
	<<R:<<R:<<R:<<R:<<R:<<R:
	.poke.address[Y]=R
	Y=2:A=3:.poke.address[Y]=A
endproc 

proc main()
	byte xp
	io.select(0)
	A=$3F:Vicky.Master.Control=A
	A=1:Bitmap0Control=A
	A=1:Bitmap0High=A
	clear.bitmap($3)
	clear.sprites()

	map.into(16)
	set.fill(R,$E8)
	do.fill(1024)
	map.default()

	A=8
	a.for
		a->s
		<<a:<<a:<<a:<<a:a+64:xp=a
		s->a
		sprite.use(a)
		sprite.show()
		sprite.image(8)
		sprite.move(xp,xp)
	next

	io.select(0)
	poke($D903,3)

	sprite.use(4)
	repeat
	R=320:r.for
		sprite.move(R,64)
		R=2000:R.FOR:NEXT
	next
	A=0:A<>?:until
	halt
endproc