byte MMUControl@0
byte IOControl@1
byte Vicky.Master.Control@$D000
byte Bitmap0Control@$D100,Bitmap0High@$D103
proc io.select()
IOControl=A
	8003 : 85 .
	8004 : 01 .
endproc
	8005 : 60 `
zword .poke.address@$4C
byte .fill.data
proc poke()
inline $86,$C1,$85,$C0,$98,$92,$C0,$60
	8006 : 86 .
	8007 : c1 .
	8008 : 85 .
	8009 : c0 .
	800a : 98 .
	800b : 92 .
	800c : c0 .
	800d : 60 `
endproc
	800e : 60 `
proc set.fill()
.poke.address=R
	800f : 85 .
	8010 : 4c L
	8011 : 86 .
	8012 : 4d M
.fill.data=Y
	8013 : 8c .
	8014 : 00 .
	8015 : 06 .
endproc
	8016 : 60 `
proc do.fill()
Y=0
	8017 : a0 .
	8018 : 00 .
r.for
	8019 : c9 .
	801a : 00 .
	801b : d0 .
	801c : 01 .
	801d : ca .
	801e : 3a :
	801f : da .
	8020 : 48 H
A=.fill.data
	8021 : ad .
	8022 : 00 .
	8023 : 06 .
.poke.address[Y]=A
	8024 : 91 .
	8025 : 4c L
++.poke.address
	8026 : e6 .
	8027 : 4c L
	8028 : d0 .
	8029 : 02 .
	802a : e6 .
	802b : 4d M
next
	802c : 68 h
	802d : fa .
	802e : d0 .
	802f : 00 .
	802f : e9 [PATCH]
	8030 : c9 .
	8031 : 00 .
	8032 : d0 .
	8033 : 00 .
	8033 : e5 [PATCH]
endproc
	8034 : 60 `
proc map()
CPU->S
	8035 : 48 H
	8036 : da .
	8037 : 5a Z
A=$80
	8038 : a9 .
	8039 : 80 .
MMUControl=A
	803a : 85 .
	803b : 00 .
S->CPU
	803c : 7a z
	803d : fa .
	803e : 68 h
R+8
	803f : 18 .
	8040 : 69 i
	8041 : 08 .
	8042 : 90 .
	8043 : 01 .
	8044 : e8 .
poke()
	8045 : 20 .
	8046 : 06 .
	8047 : 80 .
A=$00
	8048 : a9 .
	8049 : 00 .
MMUControl=A
	804a : 85 .
	804b : 00 .
endproc
	804c : 60 `
proc map.into()
a+8
	804d : 18 .
	804e : 69 i
	804f : 08 .
y=a
	8050 : a8 .
map(1)
	8051 : a9 .
	8052 : 01 .
	8053 : a2 .
	8054 : 00 .
	8055 : 20 .
	8056 : 35 5
	8057 : 80 .
R=$2000
	8058 : a9 .
	8059 : 00 .
	805a : a2 .
	805b : 20 .
endproc
	805c : 60 `
proc map.default()
map(1,9)
	805d : a9 .
	805e : 01 .
	805f : a2 .
	8060 : 00 .
	8061 : a0 .
	8062 : 09 .
	8063 : 20 .
	8064 : 35 5
	8065 : 80 .
endproc
	8066 : 60 `
proc clear.bitmap()
.fill.data=A
	8067 : 8d .
	8068 : 00 .
	8069 : 06 .
A=9
	806a : a9 .
	806b : 09 .
a.for
	806c : 3a :
	806d : 48 H
map.into()
	806e : 20 .
	806f : 4d M
	8070 : 80 .
.poke.address=R
	8071 : 85 .
	8072 : 4c L
	8073 : 86 .
	8074 : 4d M
32
	8075 : a9 .
	8076 : 20 .
	8077 : a2 .
	8078 : 00 .
a.for
	8079 : 3a :
	807a : 48 H
A=.fill.data
	807b : ad .
	807c : 00 .
	807d : 06 .
Y=0
	807e : a0 .
	807f : 00 .
repeat
.poke.address[Y]=A
	8080 : 91 .
	8081 : 4c L
++Y
	8082 : c8 .
Y=?
	8083 : c0 .
	8084 : 00 .
until
	8085 : d0 .
	8086 : 00 .
	8086 : f9 [PATCH]
R=.poke.address
	8087 : a5 .
	8088 : 4c L
	8089 : a6 .
	808a : 4d M
R+256
	808b : 18 .
	808c : 69 i
	808d : 00 .
	808e : 48 H
	808f : 8a .
	8090 : 69 i
	8091 : 01 .
	8092 : aa .
	8093 : 68 h
.poke.address=R
	8094 : 85 .
	8095 : 4c L
	8096 : 86 .
	8097 : 4d M
next
	8098 : 68 h
	8099 : d0 .
	809a : 00 .
	809a : de [PATCH]
next
	809b : 68 h
	809c : d0 .
	809d : 00 .
	809d : ce [PATCH]
map.default()
	809e : 20 .
	809f : 5d ]
	80a0 : 80 .
endproc
	80a1 : 60 `
proc clear.sprites()
io.select(0)
	80a2 : a9 .
	80a3 : 00 .
	80a4 : a2 .
	80a5 : 00 .
	80a6 : 20 .
	80a7 : 03 .
	80a8 : 80 .
set.fill($D900,$00)
	80a9 : a9 .
	80aa : 00 .
	80ab : a2 .
	80ac : d9 .
	80ad : a0 .
	80ae : 00 .
	80af : 20 .
	80b0 : 0f .
	80b1 : 80 .
do.fill($200)
	80b2 : a9 .
	80b3 : 00 .
	80b4 : a2 .
	80b5 : 02 .
	80b6 : 20 .
	80b7 : 17 .
	80b8 : 80 .
endproc
	80b9 : 60 `
word .current.sprite
proc sprite.use()
<<R
	80ba : 0a .
	80bb : 48 H
	80bc : 8a .
	80bd : 2a *
	80be : aa .
	80bf : 68 h
<<R
	80c0 : 0a .
	80c1 : 48 H
	80c2 : 8a .
	80c3 : 2a *
	80c4 : aa .
	80c5 : 68 h
<<R
	80c6 : 0a .
	80c7 : 48 H
	80c8 : 8a .
	80c9 : 2a *
	80ca : aa .
	80cb : 68 h
R+$D900
	80cc : 18 .
	80cd : 69 i
	80ce : 00 .
	80cf : 48 H
	80d0 : 8a .
	80d1 : 69 i
	80d2 : d9 .
	80d3 : aa .
	80d4 : 68 h
.current.sprite=R
	80d5 : 8d .
	80d6 : 01 .
	80d7 : 06 .
	80d8 : 8e .
	80d9 : 02 .
	80da : 06 .
endproc
	80db : 60 `
proc sprite.show()
R=.current.sprite
	80dc : ad .
	80dd : 01 .
	80de : 06 .
	80df : ae .
	80e0 : 02 .
	80e1 : 06 .
.poke.address=R
	80e2 : 85 .
	80e3 : 4c L
	80e4 : 86 .
	80e5 : 4d M
Y=0
	80e6 : a0 .
	80e7 : 00 .
A=.poke.address[Y]
	80e8 : b1 .
	80e9 : 4c L
A=1
	80ea : a9 .
	80eb : 01 .
.poke.address[Y]=A
	80ec : 91 .
	80ed : 4c L
endproc
	80ee : 60 `
proc sprite.hide()
.poke.address=R
	80ef : 85 .
	80f0 : 4c L
	80f1 : 86 .
	80f2 : 4d M
Y=0
	80f3 : a0 .
	80f4 : 00 .
A=.poke.address[Y]
	80f5 : b1 .
	80f6 : 4c L
A=0
	80f7 : a9 .
	80f8 : 00 .
.poke.address[Y]=A
	80f9 : 91 .
	80fa : 4c L
endproc
	80fb : 60 `
proc sprite.move()
Y->S
	80fc : 5a Z
R->S
	80fd : 48 H
	80fe : da .
R=.current.sprite
	80ff : ad .
	8100 : 01 .
	8101 : 06 .
	8102 : ae .
	8103 : 02 .
	8104 : 06 .
R+4
	8105 : 18 .
	8106 : 69 i
	8107 : 04 .
	8108 : 90 .
	8109 : 01 .
	810a : e8 .
.poke.address=R
	810b : 85 .
	810c : 4c L
	810d : 86 .
	810e : 4d M
S->R
	810f : fa .
	8110 : 68 h
Y=0
	8111 : a0 .
	8112 : 00 .
.poke.address[Y]=R
	8113 : 91 .
	8114 : 4c L
	8115 : c8 .
	8116 : 8a .
	8117 : 91 .
	8118 : 4c L
	8119 : 88 .
	811a : b1 .
	811b : 4c L
++Y
	811c : c8 .
++Y
	811d : c8 .
S->A
	811e : 68 h
R=A
	811f : a2 .
	8120 : 00 .
.poke.address[Y]=R
	8121 : 91 .
	8122 : 4c L
	8123 : c8 .
	8124 : 8a .
	8125 : 91 .
	8126 : 4c L
	8127 : 88 .
	8128 : b1 .
	8129 : 4c L
endproc
	812a : 60 `
proc sprite.image()
R->S
	812b : 48 H
	812c : da .
R=.current.sprite
	812d : ad .
	812e : 01 .
	812f : 06 .
	8130 : ae .
	8131 : 02 .
	8132 : 06 .
++R
	8133 : 1a .
	8134 : d0 .
	8135 : 01 .
	8136 : e8 .
.poke.address=R
	8137 : 85 .
	8138 : 4c L
	8139 : 86 .
	813a : 4d M
S->R
	813b : fa .
	813c : 68 h
Y=0
	813d : a0 .
	813e : 00 .
<<R
	813f : 0a .
	8140 : 48 H
	8141 : 8a .
	8142 : 2a *
	8143 : aa .
	8144 : 68 h
<<R
	8145 : 0a .
	8146 : 48 H
	8147 : 8a .
	8148 : 2a *
	8149 : aa .
	814a : 68 h
<<R
	814b : 0a .
	814c : 48 H
	814d : 8a .
	814e : 2a *
	814f : aa .
	8150 : 68 h
<<R
	8151 : 0a .
	8152 : 48 H
	8153 : 8a .
	8154 : 2a *
	8155 : aa .
	8156 : 68 h
<<R
	8157 : 0a .
	8158 : 48 H
	8159 : 8a .
	815a : 2a *
	815b : aa .
	815c : 68 h
<<R
	815d : 0a .
	815e : 48 H
	815f : 8a .
	8160 : 2a *
	8161 : aa .
	8162 : 68 h
.poke.address[Y]=R
	8163 : 91 .
	8164 : 4c L
	8165 : c8 .
	8166 : 8a .
	8167 : 91 .
	8168 : 4c L
	8169 : 88 .
	816a : b1 .
	816b : 4c L
Y=2
	816c : a0 .
	816d : 02 .
A=3
	816e : a9 .
	816f : 03 .
.poke.address[Y]=A
	8170 : 91 .
	8171 : 4c L
endproc
	8172 : 60 `
proc main()
byte xp
io.select(0)
	8173 : a9 .
	8174 : 00 .
	8175 : a2 .
	8176 : 00 .
	8177 : 20 .
	8178 : 03 .
	8179 : 80 .
A=$3F
	817a : a9 .
	817b : 3f ?
Vicky.Master.Control=A
	817c : 8d .
	817d : 00 .
	817e : d0 .
A=1
	817f : a9 .
	8180 : 01 .
Bitmap0Control=A
	8181 : 8d .
	8182 : 00 .
	8183 : d1 .
A=1
	8184 : a9 .
	8185 : 01 .
Bitmap0High=A
	8186 : 8d .
	8187 : 03 .
	8188 : d1 .
clear.bitmap($C0)
	8189 : a9 .
	818a : c0 .
	818b : a2 .
	818c : 00 .
	818d : 20 .
	818e : 67 g
	818f : 80 .
clear.sprites()
	8190 : 20 .
	8191 : a2 .
	8192 : 80 .
map.into(16)
	8193 : a9 .
	8194 : 10 .
	8195 : a2 .
	8196 : 00 .
	8197 : 20 .
	8198 : 4d M
	8199 : 80 .
set.fill(R,$E8)
	819a : a0 .
	819b : e8 .
	819c : 20 .
	819d : 0f .
	819e : 80 .
do.fill(1024)
	819f : a9 .
	81a0 : 00 .
	81a1 : a2 .
	81a2 : 04 .
	81a3 : 20 .
	81a4 : 17 .
	81a5 : 80 .
map.default()
	81a6 : 20 .
	81a7 : 5d ]
	81a8 : 80 .
A=8
	81a9 : a9 .
	81aa : 08 .
a.for
	81ab : 3a :
	81ac : 48 H
a->s
	81ad : 48 H
<<a
	81ae : 0a .
<<a
	81af : 0a .
<<a
	81b0 : 0a .
<<a
	81b1 : 0a .
a+64
	81b2 : 18 .
	81b3 : 69 i
	81b4 : 40 @
xp=a
	81b5 : 8d .
	81b6 : 03 .
	81b7 : 06 .
s->a
	81b8 : 68 h
sprite.use(a)
	81b9 : a2 .
	81ba : 00 .
	81bb : 20 .
	81bc : ba .
	81bd : 80 .
sprite.show()
	81be : 20 .
	81bf : dc .
	81c0 : 80 .
sprite.image(8)
	81c1 : a9 .
	81c2 : 08 .
	81c3 : a2 .
	81c4 : 00 .
	81c5 : 20 .
	81c6 : 2b +
	81c7 : 81 .
sprite.move(xp,xp)
	81c8 : ad .
	81c9 : 03 .
	81ca : 06 .
	81cb : a2 .
	81cc : 00 .
	81cd : ac .
	81ce : 03 .
	81cf : 06 .
	81d0 : 20 .
	81d1 : fc .
	81d2 : 80 .
next
	81d3 : 68 h
	81d4 : d0 .
	81d5 : 00 .
	81d5 : d5 [PATCH]
io.select(0)
	81d6 : a9 .
	81d7 : 00 .
	81d8 : a2 .
	81d9 : 00 .
	81da : 20 .
	81db : 03 .
	81dc : 80 .
poke($D903,3)
	81dd : a9 .
	81de : 03 .
	81df : a2 .
	81e0 : d9 .
	81e1 : a0 .
	81e2 : 03 .
	81e3 : 20 .
	81e4 : 06 .
	81e5 : 80 .
sprite.use(4)
	81e6 : a9 .
	81e7 : 04 .
	81e8 : a2 .
	81e9 : 00 .
	81ea : 20 .
	81eb : ba .
	81ec : 80 .
repeat
R=320
	81ed : a9 .
	81ee : 40 @
	81ef : a2 .
	81f0 : 01 .
r.for
	81f1 : c9 .
	81f2 : 00 .
	81f3 : d0 .
	81f4 : 01 .
	81f5 : ca .
	81f6 : 3a :
	81f7 : da .
	81f8 : 48 H
sprite.move(R,64)
	81f9 : a0 .
	81fa : 40 @
	81fb : 20 .
	81fc : fc .
	81fd : 80 .
R=2000
	81fe : a9 .
	81ff : d0 .
	8200 : a2 .
	8201 : 07 .
R.FOR
	8202 : c9 .
	8203 : 00 .
	8204 : d0 .
	8205 : 01 .
	8206 : ca .
	8207 : 3a :
	8208 : da .
	8209 : 48 H
NEXT
	820a : 68 h
	820b : fa .
	820c : d0 .
	820d : 00 .
	820d : f4 [PATCH]
	820e : c9 .
	820f : 00 .
	8210 : d0 .
	8211 : 00 .
	8211 : f0 [PATCH]
next
	8212 : 68 h
	8213 : fa .
	8214 : d0 .
	8215 : 00 .
	8215 : db [PATCH]
	8216 : c9 .
	8217 : 00 .
	8218 : d0 .
	8219 : 00 .
	8219 : d7 [PATCH]
A=0
	821a : a9 .
	821b : 00 .
A<>?
	821c : c9 .
	821d : 00 .
until
	821e : f0 .
	821f : 00 .
	821f : cd [PATCH]
halt
	8220 : 80 .
	8221 : fe .
endproc
	8222 : 60 `
