byte MMUControl@0
byte IOControl@1
byte Vicky.Master.Control@$D000
byte Bitmap0Control@$D100
proc io.select()
IOControl=A
	8003 : 85 .
	8004 : 01 .
endproc
	8005 : 60 `
zword poke.address
byte fill.data
proc poke()
poke.address=R
	8006 : 85 .
	8007 : 20 .
	8008 : 86 .
	8009 : 21 !
A=Y
	800a : 98 .
Y=0
	800b : a0 .
	800c : 00 .
poke.address[Y]=A
	800d : 91 .
	800e : 20 .
endproc
	800f : 60 `
proc set.fill()
poke.address=R
	8010 : 85 .
	8011 : 20 .
	8012 : 86 .
	8013 : 21 !
fill.data=Y
	8014 : 8c .
	8015 : 00 .
	8016 : 06 .
endproc
	8017 : 60 `
proc do.fill()
Y=0
	8018 : a0 .
	8019 : 00 .
r.for
	801a : c9 .
	801b : 00 .
	801c : d0 .
	801d : 01 .
	801e : ca .
	801f : 3a :
	8020 : da .
	8021 : 48 H
A=fill.data
	8022 : ad .
	8023 : 00 .
	8024 : 06 .
poke.address[Y]=A
	8025 : 91 .
	8026 : 20 .
++poke.address
	8027 : e6 .
	8028 : 20 .
	8029 : d0 .
	802a : 02 .
	802b : e6 .
	802c : 21 !
next
	802d : 68 h
	802e : fa .
	802f : d0 .
	8030 : 00 .
	8030 : e9 [PATCH]
	8031 : c9 .
	8032 : 00 .
	8033 : d0 .
	8034 : 00 .
	8034 : e5 [PATCH]
endproc
	8035 : 60 `
proc main()
io.select(0)
	8036 : a9 .
	8037 : 00 .
	8038 : a2 .
	8039 : 00 .
	803a : 20 .
	803b : 03 .
	803c : 80 .
A=15
	803d : a9 .
	803e : 0f .
Vicky.Master.Control=A
	803f : 8d .
	8040 : 00 .
	8041 : d0 .
A=1
	8042 : a9 .
	8043 : 01 .
Bitmap0Control=A
	8044 : 8d .
	8045 : 00 .
	8046 : d1 .
set.fill($2000,3)
	8047 : a9 .
	8048 : 00 .
	8049 : a2 .
	804a : 20 .
	804b : a0 .
	804c : 03 .
	804d : 20 .
	804e : 10 .
	804f : 80 .
do.fill(8192)
	8050 : a9 .
	8051 : 00 .
	8052 : a2 .
	8053 : 20 .
	8054 : 20 .
	8055 : 18 .
	8056 : 80 .
set.fill($4000,$18)
	8057 : a9 .
	8058 : 00 .
	8059 : a2 .
	805a : 40 @
	805b : a0 .
	805c : 18 .
	805d : 20 .
	805e : 10 .
	805f : 80 .
do.fill(8192)
	8060 : a9 .
	8061 : 00 .
	8062 : a2 .
	8063 : 20 .
	8064 : 20 .
	8065 : 18 .
	8066 : 80 .
set.fill($6000,$E0)
	8067 : a9 .
	8068 : 00 .
	8069 : a2 .
	806a : 60 `
	806b : a0 .
	806c : e0 .
	806d : 20 .
	806e : 10 .
	806f : 80 .
do.fill(8192)
	8070 : a9 .
	8071 : 00 .
	8072 : a2 .
	8073 : 20 .
	8074 : 20 .
	8075 : 18 .
	8076 : 80 .
halt
	8077 : 80 .
	8078 : fe .
endproc
	8079 : 60 `
